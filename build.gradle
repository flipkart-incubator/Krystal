plugins {
    id 'com.diffplug.spotless' version '6.16.0'
    id 'org.checkerframework' version '0.6.30'
    id 'net.ltgt.errorprone' version '3.1.0'
}

ext {
    clojarsusername = project.properties['clojarsusername'] ?: ""
    clojarspassword = project.properties['clojarspassword'] ?: ""
    krystal_version = '6.1.0-SNAPSHOT'
}

checkerFramework {
    checkers = [
            'org.checkerframework.checker.nullness.NullnessChecker',
    ]
    extraJavacArgs = [
            "-Astubs=${rootDir}/config/checker/stubs",
    ]
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'idea'

    group 'com.flipkart.krystal'
    version project.krystal_version

    publishing {
        repositories {
            maven {
                url "https://clojars.org/repo"
                credentials {
                    username = rootProject.ext.clojarsusername
                    password = rootProject.ext.clojarspassword
                }
            }
        }
        publications.withType(MavenPublication).configureEach {
            pom {
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
}

configure(subprojects.findAll { it.name != 'krystal-bom' }) {
    apply plugin: 'java-library'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'org.checkerframework'
    apply plugin: 'jacoco'
    apply plugin: 'net.ltgt.errorprone'

    spotless {
        java {
            target 'src/*/java/**/*.java', 'build/generated/sources/annotationProcessor/**/*.java'
            googleJavaFormat()
        }
    }
    tasks.named('spotlessJava').configure { mustRunAfter('compileJava') }
    tasks.named('spotlessJava').configure { mustRunAfter('compileTestJava') }

    dependencies {
        implementation 'com.google.guava:guava'
        implementation 'org.checkerframework:checker-qual'
        implementation 'org.slf4j:slf4j-api'
        implementation 'jakarta.inject:jakarta.inject-api'
        errorprone 'com.google.errorprone:error_prone_core'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testImplementation 'org.assertj:assertj-core'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        api platform('com.fasterxml.jackson:jackson-bom:2.16.1')
        api platform('org.junit:junit-bom:5.10.1')
        api platform('org.assertj:assertj-bom:3.25.2')
        api platform('io.github.resilience4j:resilience4j-bom:2.2.0')
        api platform('com.google.inject:guice-bom:7.0.0')
        api platform('org.slf4j:slf4j-bom:2.0.13')
        constraints {
            implementation 'com.google.guava:guava:33.0.0-jre'
            implementation 'org.checkerframework:checker-qual:3.42.0'
            implementation 'org.slf4j:slf4j-api:2.0.11'
            implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
            implementation 'org.reflections:reflections:0.10.2'
            implementation 'com.squareup:javapoet:1.13.0'
            implementation 'commons-cli:commons-cli:1.6.0'

            implementation 'com.google.auto.service:auto-service:1.1.1'
            annotationProcessor 'com.google.auto.service:auto-service:1.1.1'

            errorprone 'com.google.errorprone:error_prone_core:2.27.1'

            annotationProcessor 'com.flipkart.krystal:vajram-codegen:' + krystal_version
            testAnnotationProcessor 'com.flipkart.krystal:vajram-codegen:' + krystal_version

            String lombok_version = '1.18.30'
            implementation 'org.projectlombok:lombok:' + lombok_version
            annotationProcessor 'org.projectlombok:lombok:' + lombok_version
            testAnnotationProcessor 'org.projectlombok:lombok:' + lombok_version
        }
    }

    afterEvaluate {
        tasks.named('spotlessCheck') {
            dependsOn('spotlessApply')
        }
    }

    checkerFramework {
        checkers = [
                'org.checkerframework.checker.nullness.NullnessChecker',
                'org.checkerframework.checker.calledmethods.CalledMethodsChecker',
        ]
        extraJavacArgs = [
                "-Astubs=${rootDir}/config/checker/stubs",
        ]
        excludeTests = true
    }

    jacoco {
        toolVersion = "0.8.11"
    }

    java {
        withSourcesJar()
    }
    tasks.named('sourcesJar').configure { mustRunAfter('compileJava') }

    test {
        useJUnitPlatform()
    }
}